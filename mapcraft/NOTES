
Uses MapXML as a base package to work from.

uk.co.demon.bifrost.rpg.mapxml
uk.co.demon.bifrost.rpg.worldcraft

Uses hex based tiles.

A full world will have to support 'null' hexes which cannot be mapped to. These are to represent the spherical world.

Maybe use xplanet to render 3D images? Need high resolution map for this.

44,000km world:
    5km        8800
    25km        1760
    125km    352
    
125km hex is probably highest resolution can support, at least until we have SAX support, and even then it gets dodgy.
SAX support tricky since we keep stuff in memory in MapXML object.


Places:
    <place name="" x="" y="">
        <type></type>
    </place>

Types:
    Village
    Town
    City
    Earthmaster
    Gargun
    
Roads

Can we draw roads in real time? Makes them very straight... Look at Java 2D stuff. No need to draw lots of gif files though.


Different types of painting tools:
    Terrain
    Height
    Places
    Rivers
    Roads
    Areas



0.1 (Basics)
    Decide on file format. SAX/DOM decision.
    File format versioning support.
*    Support scrolling map.
*    Support terrain palette.
    Support named places.
    Display labels for places.
    Edit place info.
*    Try and use PNG format graphics.
    Move source files into package directories.
    Fix bugs in cursor position.
    Produce correct headers/id for new/saved maps.

0.2 (Basics extra)
    Support rivers as vectors.
    Support roads as vectors.
    Support map cropping and linking to submaps.
    Support rescale facility (up and down).
    Resize boundaries of a map.
    Names for rivers and roads.
    
0.3 (Printing support)
    Support for multiple display resolutions.
    Support printing to image file.
    Hex overlay of map.

0.4 (Finish standard features)
    Height palette.
    Support of named areas.
    Hills layer.
    Random village names? Based on dictionary.

0.5 (Support for worlds)
    Full world maps.
    Output to xplanet texture format.

0.6 (UI design considerations)
    Map creation dialogs.
    File load/save inferface.
    Toolbar for common features.
    Map properties dialog/editor.
    Wrapper class to provide GUI framework.
    
0.7 (Web support)
    Output of web image maps (hrefs to places only).
    Wrap all resources into map bundle (jar?) for export.
    Applet viewer.

0.8 (Helper)
    Anti-aliase on rescale.
    Diff support for scaled children.
    Fill option.
    Brush options.

0.9 (Optimisation)
    Any necessary speed enhancements.
    Any necessary memory efficiency enhancements.

1.0 (Release)
    Stability fixes.
    Run from jar file.
    Preferences file etc.
    Schema for file format.
    Documentation.

1.x (Wish list)
    href linking to documents on areas/places.
    3D display of terrain areas (isometric).
    3D display of terrain areas (perspective).
    Autogeneration of small area maps (villages etc).
    Undo support.
    Auto river generation.
    Editing terrain/place types.
    Variable coast masks for nicer display.
    Links into yagsbook for inline display of maps.
    Output SVG

Map Identification

Each map has a unique identifier string - millisecond time of creation and map name, e.g.:
    "harn.105578476346"
    
<map>
    <header>
        <name>Harn</name>
        <id>harn.105578476346</id>
        <parent>harn.105573423739</parent>
        <author>Samuel Penn</author>
        <cvs>
            <version></version>
            <date></date>
        </cvs>
        <format>0.0.2</format>
    </header>
    
</map>


Tilesets?

Are they still needed? With current memory constraints, we may want to dump them, and jut use linking instead. This would make things a lot simpler.

Current position of river info won't work if we have multiple tilesets.
How do we port diffs to children/parents? We could do a comparison of two
maps of different scales, work out what the other scale 'should' look
like, and set it.

Easier than any automatic function that works on tilesets.

Drop tilesets.

May want to have different terrain palettes in different scales of the map as well. Much better if maps completely independent. Still have parent reference however.



Hills/Height

Height will be represented with blobs.
There will be a height scale, probably 10m. Heights can be positive and negative. 2 chars will be used for each tile. Map will have a base height as well, just in case we need it for small maps, and height scale can be changed from the default.

Hills will be a mask, similar to rivers. Represents how hilly a tile is.
Could, in theory, have very tight blobs - probably only need 4 values for hills, so one char could represent many tiles. Or double up hill and river data.

0 = flat
1 = rolling hills
2 = hilly
3 = very hilly


Rivers

Use vectors. A vector consists of a list of tiles (x,y) which it
passes through. Begin near the coast and work upstream.
A river has a name, a width. Width may change.

Endpoint may be a coastline, a lake or another river.

public class River {
    short        id;
    String        name;
    Vector        segments; // RiverSegments
}

class RiverSegment {
    short        id;
    short        width;        // metres
    byte            upstream;
    byte            downstream;
}

Roads

Road types:
    Track
    Trail
    Road
    Paved
    
Rivers and roads should use the same backend for display.
Have a Path and PathSegment class possibly.


Sites

<site type="3" x="6" y="34">
    <name>Underhill</name>
    <description>Some place</description>
</site>
#ÿ