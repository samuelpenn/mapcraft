package uk.org.glendale.worldgen.astro.planet;

import java.awt.GraphicsEnvironment;
import java.io.File;

import uk.org.glendale.graphics.SimpleImage;
import uk.org.glendale.rpg.traveller.systems.codes.AtmospherePressure;
import uk.org.glendale.rpg.traveller.systems.codes.AtmosphereType;
import uk.org.glendale.rpg.traveller.systems.codes.LifeType;
import uk.org.glendale.rpg.utils.Die;
import uk.org.glendale.worldgen.astro.planet.builders.MapDrawer;
import uk.org.glendale.worldgen.astro.planet.builders.PlanetBuilder;
import uk.org.glendale.worldgen.astro.planet.builders.PlanetDescription;
import uk.org.glendale.worldgen.astro.planet.maps.Tile;
import uk.org.glendale.worldgen.astro.star.Star;
import uk.org.glendale.worldgen.civ.commodity.Commodity;
import uk.org.glendale.worldgen.civ.commodity.CommodityFactory;
import uk.org.glendale.worldgen.server.AppManager;

public interface Builder {
	
	void setCommodityFactory(CommodityFactory factory);

	/**
	 * Gets the type of this planet, according to the PCL. Will always return a
	 * valid value.
	 * 
	 * @return Gets the PCL type.
	 */
	public abstract PlanetType getPlanetType();

	/**
	 * Sets the star that is the primary for this world. This must be set before
	 * the world can be generated since it is used to determine certain world
	 * characteristics.
	 * 
	 * @param star
	 *            Primary star for this world.
	 */
	public void setStar(Star star);

	/**
	 * Gets the star that is being used by this builder.
	 * 
	 * @return Star that is being used.
	 */
	public Star getStar();

	/**
	 * Sets the planet that is to be generated. The planet will be modified
	 * according to the rules for the given type of builder. Astronomical
	 * statistics, such as orbital distance, will not be touched.
	 * 
	 * @param planet
	 *            Planet to be generated by this builder.
	 */
	void setPlanet(Planet planet);
	

	/**
	 * Gets the planet that this builder is building.
	 * 
	 * @return Planet that is in use.
	 */
	Planet getPlanet();

	/**
	 * Adds a resource to the list of resources that this planet provides.
	 * 
	 * @param commodityName
	 *            Name of the resource.
	 * @param density
	 *            Density of the resource, from 1-100.
	 */
	void addResource(String commodityName, int density);

	void addResource(Commodity commodity, int density);


	/**
	 * Generate standard planetary statistics.
	 */
	void generate();

	/**
	 * Generate surface map for this planet.
	 */
	void generateMap();

	/**
	 * Generate resources for this planet.
	 */
	void generateResources();

	void generateDescription();


	SimpleImage getImage();

	/**
	 * Get a list of moon types to add to this world. This list is used to
	 * generate the moons after the planet has been persisted. If the list is
	 * null or empty, the world has no moons.
	 * 
	 * @return List of planet types for moons.
	 */
	Builder[] getMoonBuilders();

	int getFirstMoonDistance();
}
